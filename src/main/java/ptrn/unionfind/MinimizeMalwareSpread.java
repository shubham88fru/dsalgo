package ptrn.unionfind;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

//@link - https://leetcode.com/problems/minimize-malware-spread/
//@check - https://www.educative.io/module/page/Z4JLg2tDQPVv6QjgO/10370001/4976190424350720/5742315198218240
//@copypasta
public class MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // Stores the length of the graph
        int length = graph.length;
        // Calls UnionFind constructor
        UnionFind11 unionFind = new UnionFind11(length);
        // Find all the connected components of the graph
        for (int x = 0; x < length; x++) {
            for (int y = 0; y < length; y++) {
                if (graph[x][y] == 1) {
                    unionFind.Union(x, y);
                }
            }
        }

        Map<Integer, Integer> infected = new HashMap<>();
        Arrays.sort(initial);
        // Count the number of initial infected nodes each connected component has
        for (int x = 0; x < initial.length; x++) {
            int findIx = unionFind.findParent(initial[x]);
            infected.put(findIx, infected.getOrDefault(findIx, 0) + 1);
        }

        int candidateNode = initial[0];
        int maximumSize = 0;
        // Count all the infected nodes each connected component has
        for (int i = 0; i < initial.length; i++) {
            int infectionCount = infected.get(unionFind.findParent(initial[i]));
            int componentSize = unionFind.size[unionFind.findParent(initial[i])];
            if (infectionCount != 1) {
                continue;
            }
            // Return the candidate node from largest length connected component
            if (componentSize > maximumSize) {
                maximumSize = componentSize;
                candidateNode = initial[i];
            } else if (componentSize == maximumSize && initial[i] < candidateNode) {
                candidateNode = initial[i];
            }
        }
        return candidateNode;
    }
}

class UnionFind11 {
    int[] parents;
    int[] size;
    // Constructor
    public UnionFind11(int n) {
        parents = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parents[i] = i;
            size[i] = 1;
        }
    }
    // Function to find which subset a particular element belongs.
    public int findParent(int x) {
        if (parents[x] == x) {
            return x;
        }
        return parents[x] = findParent(parents[x]);
    }
    // Function to join two subsets into a single subset.
    public void Union(int x, int y) {
        int xParent = findParent(x);
        int yParent = findParent(y);
        if (xParent != yParent) {
            parents[xParent] = yParent;
            size[yParent] += size[xParent];
        }
    }
}
